// package main

// type Student struct {
// 	name  string
// 	age   int
// 	class int
// }

// type People struct {
// 	name  string
// 	child *People
// }

// func main() {
// 	/*
// 		type 类型名 struct {
// 			字段1 字段1类型
// 			字段2 字段2类型
// 			…
// 		}
// 		对各个部分的说明：
// 			- 类型名：标识自定义结构体的名称，在同一个包内不能重复。
// 			- struct{}：表示结构体类型，type 类型名 struct{}可以理解为将 struct{} 结构体定义为类型名的类型。
// 			- 字段1、字段2……：表示结构体字段名，结构体中的字段名必须唯一。
// 			- 字段1类型、字段2类型……：表示结构体各个字段的类型。

// 	*/

// 	// s := new(Student)
// 	// s.name = "jj"
// 	// s.age = 20
// 	// s.class = 1

// 	// fmt.Printf("s: %v\n", s)

// 	// a := &Student{}
// 	// fmt.Printf("%T", a)

// 	/*
// 	   初始化
// 	   1) 键值对初始化结构体的书写格式
// 	   键值对初始化的格式如下：
// 	   ins := 结构体类型名{
// 	       字段1: 字段1的值,
// 	       字段2: 字段2的值,
// 	       …
// 	   }

// 	   下面是对各个部分的说明：
// 	   结构体类型：定义结构体时的类型名称。
// 	   字段1、字段2：结构体成员的字段名，结构体类型名的字段初始化列表中，字段名只能出现一次。
// 	   字段1的值、字段2的值：结构体成员字段的初始值。

// 	*/

// 	// s := Student{
// 	// 	name:  "zz",
// 	// 	age:   20,
// 	// 	class: 3,
// 	// }
// 	// fmt.Printf("s.age: %v\n", s.age)

// 	// p := People{
// 	// 	name: "gf",
// 	// 	child: &People{
// 	// 		name: "f",
// 	// 		child: &People{
// 	// 			name: "son",
// 	// 		},
// 	// 	},
// 	// }
// 	// fmt.Printf("p.child.child.name: %v\n", p.child.child.name)

// 	/*
// 	   多个值列表初始化结构体的书写格式
// 	   多个值使用逗号分隔初始化结构体，例如：
// 	   ins := 结构体类型名{
// 	       字段1的值,
// 	       字段2的值,
// 	       …
// 	   }

// 	   使用这种格式初始化时，需要注意：
// 	   必须初始化结构体的所有字段。
// 	   每一个初始值的填充顺序必须与字段在结构体中的声明顺序一致。
// 	   键值对与值列表的初始化形式不能混用。
// 	*/

// 	// s := &Student{
// 	// 	"zz",
// 	// 	20,
// 	// 	1,
// 	// }
// 	// fmt.Printf("s: %v\n", s)
// 	/*
// 	    匿名结构体定义格式和初始化写法
// 	   匿名结构体的初始化写法由结构体定义和键值对初始化两部分组成，结构体定义时没有结构体类型名，只有字段和类型定义，键值对初始化部分由可选的多个键值对组成，如下格式所示：
// 	   ins := struct {
// 	       // 匿名结构体字段定义
// 	       字段1 字段类型1
// 	       字段2 字段类型2
// 	       …
// 	   }{
// 	       // 字段值初始化
// 	       初始化字段1: 字段1的值,
// 	       初始化字段2: 字段2的值,
// 	       …
// 	   }

// 	   下面是对各个部分的说明：
// 	   字段1、字段2……：结构体定义的字段名。
// 	   初始化字段1、初始化字段2……：结构体初始化时的字段名，可选择性地对字段初始化。
// 	   字段类型1、字段类型2……：结构体定义字段的类型。
// 	   字段1的值、字段2的值……：结构体初始化字段的初始值。
// 	*/

// 	// t := struct {
// 	// 	name string
// 	// 	age  int
// 	// }{
// 	// 	"zcc",
// 	// 	20,
// 	// }
// 	// fmt.Printf("t: %T, %v\n", t, t)

// }
